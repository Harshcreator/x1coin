{
  "stats": {
    "suites": 3,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2025-01-28T04:46:39.114Z",
    "end": "2025-01-28T04:46:39.798Z",
    "duration": 684,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0a6985ee-06b0-4d45-acb5-d6fbf4adaef5",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6c453d14-e87b-4d70-b524-68c5b81bdff1",
          "title": "Staking",
          "fullFile": "C:\\Projects\\x1coin-assignment\\test\\Staking.test.ts",
          "file": "\\test\\Staking.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should stake and unstake with rewards",
              "fullTitle": "Staking Should stake and unstake with rewards",
              "timedOut": false,
              "duration": 635,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const [owner, user] = await hardhat_1.ethers.getSigners();\n// Deploy contracts\nconst X1Coin = await hardhat_1.ethers.getContractFactory(\"X1Coin\");\nconst token = await X1Coin.deploy();\nconst Staking = await hardhat_1.ethers.getContractFactory(\"Staking\");\nconst staking = await Staking.deploy(await token.getAddress());\n// Fund the staking contract with rewards \nawait token.transfer(await staking.getAddress(), hardhat_1.ethers.parseUnits(\"1000\", 18));\nconsole.log(\"Staking Contract Balance:\", hardhat_1.ethers.formatUnits(await token.balanceOf(await staking.getAddress()), 18));\n// Fund user with tokens\nawait token.transfer(user.address, hardhat_1.ethers.parseUnits(\"1000\", 18));\nconsole.log(\"Initial User Balance:\", hardhat_1.ethers.formatUnits(await token.balanceOf(user.address), 18));\nawait token.connect(user).approve(await staking.getAddress(), hardhat_1.ethers.parseUnits(\"1000\", 18));\n// Stake 100 tokens\nawait staking.connect(user).stake(hardhat_1.ethers.parseUnits(\"100\", 18));\nconsole.log(\"Staked Amount:\", hardhat_1.ethers.formatUnits(hardhat_1.ethers.parseUnits(\"100\", 18), 18));\nconsole.log(\"User Balance After Stake:\", hardhat_1.ethers.formatUnits(await token.balanceOf(user.address), 18));\nconst THIRTY_DAYS = 30 * 24 * 60 * 60;\nawait hardhat_1.network.provider.send(\"evm_increaseTime\", [THIRTY_DAYS]);\nawait hardhat_1.network.provider.send(\"evm_mine\");\nconsole.log(\"Time elapsed: 30 days\");\nawait staking.connect(user).unstake();\nconst finalBalance = await token.balanceOf(user.address);\nconsole.log(\"Final User Balance:\", hardhat_1.ethers.formatUnits(finalBalance, 18));\nconsole.log(\"Total Rewards:\", hardhat_1.ethers.formatUnits(finalBalance - (hardhat_1.ethers.parseUnits(\"1000\", 18)), 18));\n(0, chai_1.expect)(finalBalance).to.be.closeTo(hardhat_1.ethers.parseUnits(\"1000.8219\", 18), hardhat_1.ethers.parseUnits(\"0.1\", 18));",
              "err": {},
              "uuid": "d2de837b-8640-43f0-88e7-0075cc84d4b4",
              "parentUUID": "6c453d14-e87b-4d70-b524-68c5b81bdff1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d2de837b-8640-43f0-88e7-0075cc84d4b4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 635,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        },
        {
          "uuid": "f999fe71-e2be-4df0-9b62-5515e7c7ced0",
          "title": "Token Distribution",
          "fullFile": "C:\\Projects\\x1coin-assignment\\test\\TokenDistributor.test.ts",
          "file": "\\test\\TokenDistributor.test.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Token Distribution\"",
              "fullTitle": "Token Distribution \"before all\" hook in \"Token Distribution\"",
              "timedOut": false,
              "duration": 19,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const X1Coin = await hardhat_1.ethers.getContractFactory(\"X1Coin\");\nconst TokenDistributor = await hardhat_1.ethers.getContractFactory(\"TokenDistributor\");\ntoken = await X1Coin.deploy();\ndistributor = await TokenDistributor.deploy(await token.getAddress());\nawait token.approve(distributor.getAddress(), TOTAL_SUPPLY);\nawait distributor.distribute();",
              "err": {},
              "uuid": "88f0a320-b44f-4f94-ac3b-a8250d58aae4",
              "parentUUID": "f999fe71-e2be-4df0-9b62-5515e7c7ced0",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should lock and release team tokens",
              "fullTitle": "Token Distribution Should lock and release team tokens",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const [owner] = await hardhat_1.ethers.getSigners();\n// Get vesting wallet contract with explicit function signature\nconst vestingWallet = await hardhat_1.ethers.getContractAt(\"VestingWallet\", await distributor.teamVestingWallet(), owner);\n// 1. Check initial balances\nconst initialOwnerBalance = await token.balanceOf(owner.address);\nconst initialVestingBalance = await token.balanceOf(vestingWallet.getAddress());\nconsole.log(\"Initial Owner Balance:\", initialOwnerBalance.toString());\nconsole.log(\"Initial Vesting Balance:\", initialVestingBalance.toString());\n(0, chai_1.expect)(initialOwnerBalance).to.equal(TOTAL_SUPPLY - TEAM_ALLOCATION); // 700M\n(0, chai_1.expect)(initialVestingBalance).to.equal(TEAM_ALLOCATION); // 300\n// 2. Attempt early release (no effect)\nawait vestingWallet.getFunction(\"release(address)\")(await token.getAddress());\nconst postEarlyReleaseOwnerBalance = await token.balanceOf(owner.address);\nconsole.log(\"Post Early Release Owner Balance:\", postEarlyReleaseOwnerBalance.toString());\n(0, chai_1.expect)(postEarlyReleaseOwnerBalance).to.equal(TOTAL_SUPPLY - TEAM_ALLOCATION);\n// Fast-forward 2 years to ensure complete vesting\nconst TWO_YEARS = 2 * 365 * 24 * 60 * 60;\nawait hardhat_1.network.provider.send(\"evm_increaseTime\", [TWO_YEARS]);\nawait hardhat_1.network.provider.send(\"evm_mine\");\nconst start = await vestingWallet.start();\nconst duration = await vestingWallet.duration();\nconst currentTime = await hardhat_1.ethers.provider.getBlock('latest').then(b => {\n    if (!b)\n        throw new Error(\"Block is null\");\n    return b.timestamp;\n});\nconsole.log(\"Vesting Start:\", start.toString());\nconsole.log(\"Vesting Duration:\", duration.toString());\nconsole.log(\"Current Time:\", currentTime.toString());\nconsole.log(\"Time Elapsed:\", currentTime - Number(start));\n// Release tokens after full vesting period\nawait vestingWallet.getFunction(\"release(address)\")(await token.getAddress());\n// Verify final balances\nconst finalOwnerBalance = await token.balanceOf(owner.address);\nconst finalVestingBalance = await token.balanceOf(vestingWallet.getAddress());\nconsole.log(\"Final Owner Balance:\", finalOwnerBalance.toString());\nconsole.log(\"Final Vesting Balance:\", finalVestingBalance.toString());\n(0, chai_1.expect)(finalOwnerBalance).to.equal(TOTAL_SUPPLY);\n(0, chai_1.expect)(finalVestingBalance).to.equal(0);",
              "err": {},
              "uuid": "13d0162e-0230-4c9d-b445-6edd31b7e2dd",
              "parentUUID": "f999fe71-e2be-4df0-9b62-5515e7c7ced0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "13d0162e-0230-4c9d-b445-6edd31b7e2dd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        },
        {
          "uuid": "88c4aa0c-211b-4c3e-9052-cfd76ebb8d25",
          "title": "X1Coin",
          "fullFile": "C:\\Projects\\x1coin-assignment\\test\\X1Coin.test.ts",
          "file": "\\test\\X1Coin.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should deploy with 1B supply",
              "fullTitle": "X1Coin Should deploy with 1B supply",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const X1Coin = await hardhat_1.ethers.getContractFactory(\"X1Coin\");\nconst token = await X1Coin.deploy();\nconsole.log(\"X1Coin deployed to:\", await token.getAddress());\n// Log token metadata\nconsole.log(\"Token Name:\", await token.name());\nconsole.log(\"Token Symbol:\", await token.symbol());\nconsole.log(\"Token Decimals:\", await token.decimals());\n// Log supply info\nconst totalSupply = await token.totalSupply();\nconsole.log(\"Total Supply (raw):\", totalSupply.toString());\nconsole.log(\"Total Supply (formatted):\", hardhat_1.ethers.formatUnits(totalSupply, 18));\n// Verify supply\n(0, chai_1.expect)(totalSupply).to.equal(hardhat_1.ethers.parseUnits(\"1000000000\", 18));",
              "err": {},
              "uuid": "9214c815-5fea-4cd1-94a2-445272f9d4ac",
              "parentUUID": "88c4aa0c-211b-4c3e-9052-cfd76ebb8d25",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9214c815-5fea-4cd1-94a2-445272f9d4ac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 40000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 40000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.8.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "x1coin-tests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./test-results",
        "reportFilename": "x1coin-tests",
        "overwrite": true,
        "html": true,
        "json": true,
        "quiet": false,
        "timestamp": true
      },
      "version": "6.2.0"
    }
  }
}